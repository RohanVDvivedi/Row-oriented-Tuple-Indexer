
 * remove all calls to fifo_unlock all pages function, discarding is_write_locked
 * modify bplus_tree locked pages stack to use an in-place memory holder stack, instead of an arraylist

 * loop while removing empty roots in bplus_tree delete functionality
 * reduce parent_insert malloc size, to allotted_size / 2 OR index_def.size, if index def is fixed sized

 * implement bplus_tree_cursor
 * implement find

 * implement find test cases to find range of values, add this tests between insert and delete test cases

 * check tuple size before an insert
 * test insertion of tuple longer than max insertable record size
 * test deletion of non existing keys
 * test inserting records with already existing keys
 * interleave insertions and deletion test cases

 * implement redistribute keys functions for fixed length index_def and record_def tuples, this will reduce propogation of merges, this task can be delayed to be done at the end

 * modify interior page headers to store only a byte to represent if it is the last page in the level

 * implement an error handling strategy to check the was_modified parameter, in in-memory-data-store, and exit with error, if the page was modified and was_modified was not set OR if page was not modified and was_modified was set
 * go through the project and implemnt better error handling for failures of malloc and data_access_methods
 * implement throwing errors appropriately, upon failures from dam_p

 * write multi threaded test cases to insert a large csv in to b+tree, measure performance difference

 * provide a way to allow additional default header in the implementation (*future)
