** PICKED TASKS

0
 * refactor hash_table to get bucket_count using MAX instead of LESSER_THAN_EQUALS UINT64_MAX

1
  * DEADLOCK condition identified, and needs to be fixed
   * delete_array_table_range_locker is not allowed to walk down the tree again
     * segregate the removal of empty local root into a new function, only build parameters for this vaccum in this function
     * add comment that a read locking range locker and when local root is the root of the tree, or when the local root is not empty, then a vaccum will never be required
     * vaccum will be like a function that can be called on the range_locker, and it will just perform a cleanup if the leaf page that the bucket resides in is empty
   * add a similar function to page table
   * similarly if a hash_table_iterator is started with a key, then upon delete if this bucket becomes empty, then instead return vaccum paramaters for the page_table and hash_table for the key to be tested
     * here we will have a function that will perform the vaccum in the hash_table.h
   * add a comment that not calling vaccum will still be logically correct but not give you optimum disk usage

2
  * bplus_tree refactoring walk_down functions
    * make all walk down functions take int is_key, const void* key_OR_record as inputs
    * make 2 macros for all the walk down function and name them walk_down_*_using_key(passing is_key = 1) and walk_down_*_using_record(passing is_key = 0)
    * major requirement for future tasks
  * bplus_tree optimization
   * allow releasing parent page read locks on the stacked iterator, such that all results fall between the range [key1, key2]
     * this is only allowed in stacked iterator case of READ_LOCK and READ_LOCK_INTERIOR_WRITE_LOCK_LEAF
     * do ensure that the current key we are pointing to does fall between the range, else fail this operation
     * start from the botom page i.e. the parent most page
       * break out if it is a leaf page
       * for each interior page if find_child_index_for_key_s_predecessor(key1) == find_child_index_for_key(key2) == child_index, then release lock on this page, else break out of this loop
     * key1 == NULL -> key1 is -infinity, if key2 == NULL, key2 is +infinity
     * handle cases when key1 == NULL -> child_index for it is always the ALL_LEAST_KEYS_CHILD_INDEX, if key2 == NULL -> child_index for it is always (tuple_count - 1)
     * put this function in bplus_tree_walk_down source file, call it narrow_down_locked_parents_range

** OTHER DATABASE DATASTRUCTURE TASKS (VERY IMPORTANT FOR FUTURE OF PROJECT)
 * spend a day on output of `grep -inr --include "*.c" -A 5 -B 5 ",\sabort_error);" ./src > tb` and ensure that all aborts are handled properly
 * convert malloc calls, where ever possible to stack allocations (with or without alloca calls)
 * bplus_tree new features
   * allow update, delete over a stacked WRITE_LOCK-ed iterator
   * update only if the keys match
     * update succeeds even on READ_LOCK_INTERIOR_WRITE_LOCK_LEAF and WRITE_LOCK on the unstacked iterator, if the new record is equal in size to the old record
   * build logic to use the locked pages stack to figure out how many bottom most parent pages can be discarded for a split_insert or merge, this might help to preemptively release page locks if you plan to delete the iterator right after an update, delete or an insert
   * store this information in bpttd whether the bplus_tree iterator allows duplicates or not, if it does then do not check for found_index
   * upon update walk down the tree to the same entry -> think how to do this?, upon delete take a parameter to check whether to go next or previous
     * if after an update or delete the locked pages tsack becomes empty, then deinitialize the stack, initialize it again with the same lock type and walk down again to the right tuple in the write direction
 * better return values throughout the project 0 or 1 doesnt fit all requirements
   * all errors will be < 0, and success will be 0
   * ATTEMPTED_MODIFICATION_WITH_READ_LOCKS
   * RECORD_DOES_NOT_FIT_SIZE
   * RECORD_DOES_NOT_MATCH_KEY
   * RECORD_DOES_NOT_MATCH_KEY_RANGE
   * RECORD_DUPLICATE_FOUND
   * INVALID_ITERATOR_POSITION
   * INVALID_ITERATOR
   * ABORTED
   * SUCCESS = 0
 * introduce a new mechanism in page_access_methods to allow taking a persistent write lock on the page on which we already have a write lock on, this will mostly work with iterators
 * introduce a new page type, reference page
   * it will be primarily store the reference to the root of the data structure
   * it's tuple_def in compressed form
   * its reference counter -> which if reaches 0, then the underlying data structure and the page get destroyed
   * you may also store statistic information like height, fanout, number of inserts/updates per second
   * since this page and its underlying root that it points to are both fixed, the referenceed root pointer may never be appointed
   * at times it can try to relocate the root page (needs to be done gracefully in case of linked_page_list, since it is circular and not a tree)
   * it can also be used to house locking information on the underlying data structure
 * implement a LARGE_BLOB/LARGE_STRING a read-only datastructure
   * that will be a singly linked list of unmodifiable pages containing only a single non-nullable fixed length STRING or BLOB element
   * the root page has a reference counter, and the data is all deleted if the reference counter reaches zero
   * this tuple_def will be precomputed and put inside the tuple_definitions
   * implement compare function on them, and a read only byte stream to iterate over it character by character
   * check if you could allow this complex type to be part of hash_table and bplus_tree (My answer would be no, as keys must fit on the page to be searchable)
 * implement heap_table (needs to be refined)
   * using array_table as a lookup, bucket_id->(page_id, free_space)
   * free_space will be a hint and may not represent the actual free space on the page
   * access methods
     * insert a tuple and get a (bucket_id, slot_id), you may provide a (bucket_id, slot_id) as hint
       * get read lock on the array_table and check if hint has enough space, by fetching a write lock on the page_id
       * then search for a entry with a read lock on the whole range, that has enough free space for this tuple, if found insert there
       * then take a write lock on the first unallotted bucket_id and insert a new (page_id, free_space), with the new tuple contained in there
         * with this write lock also update free space of all pages in that bucket range, also delete any entries that point to empty pages
     * delete a tuple for the given (bucket_id, slot_id)
       * returns 0, for failure, 1 for success, 2 if the page became empty
     * open a read/write iterator on the bucket_id or range of bucket_ids, do as we did with the hash_table, only keep the reader lock on the 
       * only get a reader lock on the array_table
       * if it is a single bucket, then array_table_range_locked is not even needed
       * you can do anything with the page that the iterator points to (if it is a write iterator), but not update insert, delete or update any entries
       * API
         * next_heap_table_iterator -> goes to next page
         * prev_heap_table_iterator -> goes to prev page
         * get_curr_bucket_id -> returns the current bucket_id that the iterator points to
         * get_curr_page -> returns persistent page to work with
     * vaccum a range of bucket_ids, take a flag that instructs if the bucket_range is strict (if flexible vaccum any super set of the buckets containing the provided bucket range), fix the free_space and discard entries pointing to empty pages, use this after a bulk insert/delete operations
 * implement borrow_from_left and borrow_from_right functions for interior pages and leaf pages
   * this will be implemented for variable length keys aswell
   * this will take parent page, left page and right page as input and will perform a borrow to make left and right pages balanced if it is possible by the use of borrowing
   * since this function will also modify the parent page, do relese lock on the parent page also if this operation succeeds
   * these functions will be called inside the merge_and unlock_pages_up right before we attempt to merge
   * if the borrowing succeeds we can directly release locks on all the three pages, pop the parent from the locked pages stack and break out of this loop
 * make functions to get the maximum pages that will be locked at once for any of the TupleIndexer data structures and iterators
 * Rtree will be supported
   * very similar to b+tree, n dimensional data can be searched, inserted, deleted, no least_keys_page_id required
   * splits and merges happen according to the minimal increase in interior node areas
   * searches walk down a tree, and maintain a stack, releasing locks only if only 1 entry is to be scannd in the interior node, next, prev and get_curr are supported, leafs may be acquired with write locks
   * inserts walk down only 1 path of the tree, trying to minimize the increased area
   * deleted walk down like a search would, and since we maintain a stack, a delete can be performed, which will destroy the stack releasing all locks
   * you need to define a rtree_tuple_definitions, that also has a function to get the hyper_rectangle for any of the records, which defines the minimum area hyper rectangle that the record falls into, as expected that allows you to store n dimensional lines, points etc.
   * hyper rectangle is an n dimensional rectangle.
   * all interior nodes store a hyper rectangle and a corresponding page_id, and atleast 2 entries must fit on a page, else rttd contruction fails. yet you can have any number of dimensions.
   * you can also specify any numeral datatype for dimension, as long as it is supported by the TupleStore.
   * need to think about how to calculate areas of the hyper rectangle with dimensions of different types, such that it fits a number and also does not violate precision requirements (getting areas is necessary for splitting and merging). think about using GNU MP for this purpose of getting area. BUT we can not store GNU MP number in the TupleStore. ALSO you can just use GNU MP for substractions of lower_bound and upper_bound to estimate splits and merges, but while constructing bounding boxes, you can revert to get_max(d0_lb_1, d0_lb_1), etc for computing the new bounding boxes.
   * fail insertions if the lower_bound and upper_bound of the get_hyper_rectangle do not follow <= comparison for any of the n dimensions.
   * build utility function to check that hyper rectangle does not have a negative dimension (i.e. lower_bound <= upper_bound), construct hyper_rectangle covering 2 or more hyper rectangles, and check if a hyper_rectangle intersects with another hyper_rectangle etc.
   * all queries take only hyper_rectangle keys for search and delete, while user takes a leaf record (this is why we need a function to build a hyper rectangle).
   * inserts and deletes can release page locks if it is deemed that split and merge would not propogate up the tree
   * accomodate any tuple that is atleast half the size of the leaf page, and interior page tuples would be fixed width with non NULL elements
   * keys will have a even count and all of numeral types, for ith dimension lower bound would be 2*i th key element and 2*i+1 will be upper bound, up to d dimentions (0 <= i < 2*d).

 * OPTIMIZATION in suffix truncation :: handle cases if INT, UINT, LARGE_UINT, BIT_FIELD, in loop 1, if unequal on ASC-> then set element to last_tuple_page1 element + 1 (to min element if NULL), if unequal on DESC-> then set element to last_tuple_page1 element - 1, if the last_tuple_page1_element is not the min value, else set it to NULL
