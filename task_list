** PICKED TASKS

VALIDATING WAS_MODIFIED BIT
 * implement an error handling strategy to check the was_modified bit, in in-memory-data-store, and exit with error, if the page was modified and was_modified was not set.

TRANSACTION_CONTEXT task
 * struct transaction_abort_manager {
    void* transaction_handle; // user defined type to represent the transaction
    const transaction_abort_manager_methods* tamm_p;
 };
 struct transaction_abort_manager_methods{
    const void* context;
    int is_aborted(const void* transaction_id, const void* context); // returns 0 if not aborted, else returns reason for the abort
    void mark_aborted(const void* transaction_id, const void* context, int reason); // abort the transaction, with a reason for abort
 };
 * make an opaque_structs for transaction_abort_manager_methods and use only below methods in the TupleIndexer project
 *  int is_aborted(const transaction_abort_manager* tamm_p);
    void mark_aborted(const transaction_abort_manager* tamm_p, int reason);
 * mark_aborted appends a abort log entry and flushes the WAL
 * make all pmm methods to take transaction_handle as input
 * make all dam methods to take transaction_abort_manager as the input parameter
 * make all persistent_page methods (that are wrappers to pmm and dam) to take transaction_abort_manager as input parameter, and pass respective parameter down, to wrapped methods
 * for an aborted transaction anywhere in TupleIndexer, release all persistent_page locks using dam_p and exit, undo operation has to be taken care of by the user
 * after each call to dam method wrappers for persistent_page, check if the transaction is aborted, if so release all locks and exit.

DATA_ACCESS_METHODS with tuple level locking
 * allow data_access_methods (with a context) to also enable locking only tuples on the page
 * function check if a tuple on a page is locked

DUPLICATES ALLOWING FOR INSERTS
 * add a flag as a parameter "fail_on_duplicate_key", that decides to fail an insert if a record being inserted has a duplicate key, else allow duplicates

ERROR HANDLING
 * elaborate error return in bplus_tree functions to acknowledge below
   (SUCCESS | FAILURE), OUT_OF_RESOURCES, ROLLBACK_REQUIRED as an int bit map

ERROR RETURN CODES
 * suggesting reason of a failure of data_access_method functions
 * reasons being DEADLOCK_HANDLED, CAN_T_LOCK_FREE_PAGE, OUT_OF_DISK_SPACE, OUT_OF_FREE_BUFFERS

** UTILITY
 * segregate insert and delete both into 2 functions, to reuse code, provide implementations to split_insert function call and merge_if_possible
 * build stacked iterator using locked_pages_stack, this can be used to iterate over all the tuples in the b+tree including the interior page and also only index tuples

** UPDATE FUNCTIONALITY
 * implement update which split or merges depending on the size of the record being updated.
 * implement in_place_update, to update a record in place, when all the element_def's of the record_def except for the key_element-s are fixed_sized. i.e. the value-s of the record (corresponding to key-s of the record) are fixed length types.
   * in the above algorithm, the key_def and index_dex of bpttd may be variable_sized.
   * in the above algorithm you just need to latch crab like a find operation (get lock on the next on the lower level and leave lacth on the current level, also read locking all the interior pages, and write locking only the leaf page), to reach the leaf page and if the record i found update the record in place.
 * update by key (updates the last 1) or update by record (updates an exact match record -> here we will already know if it will be a merge or a split)

** ADDITIONAL DELETE FUNCTIONALITY
 * implement delete range, deleting an entire sub tree if it falls into the range (parameter key1 and key2, (key1 <= key2) and flags that suggest whether key1 and key2 are inclusive or not)
 * implement delete record, to delete a specific record from b+tree

** OPTIMIZATION
 * implement redistribute keys functions for fixed length index_def, this will reduce propogation of merges, this task can be delayed to be done at the end
 * see how this can be accomodated in the delete and update functions available at that point in future

** NECESSARY BUT DELAYED UNTIL ACTUAL REQUIREMENTS ARE FULFILLED
 * go through the project and implemnt better error handling for failures of malloc and data_access_methods
 * write multi-threaded test cases to insert a large csv in to b+tree, measure performance difference

** OTHER DATABASE DATASTRUCTURE TASKS (VERY IMPORTANT FOR FUTURE OF PROJECT)
 * introduce concept of temporary page, any changes to temporary pages are not logges to WAL except for the WAL logging for its allocate and free calls, their last updated log sequence number is set to their allocated log_sequence_number, and they are meant to be discarded soon after the transaction ends done and tracked by you during the transaction, on abort they are only to be freed as an undo operation, their contents are not to be persisted, they are to be used as intermediate query results. there has to be a bit in persistent_page stating they they are temporary pages. AGAIN no changes to these pages are not to be logged logged to WAL, but they are allowed to be persisted to disk. Since these pages are intermediate result pages, we dont care if their contents are lost upon a crash, in that case we abort the on going transaction on reboot, and then we are only required to free them, as written in WAL. In this case we are assuming a bit map based memeory allocator, that does not store any information on the page regarding its allocation state (like what a free list would do).
   * new idea, lets allow dam to allocate page with a transaction local flag, and allow it to free the pages in case we forget to. There would already be a lock manager who can take care of it.
   * we will also let data structure's in-memeory structs (like bpttd for bplus_tree) store whether the pages it allocates are temporary or not.
   * additionally a lock manager is responsible to free them upon a commit or abort
 * linked_page_list push_tuple_at_head, push_tuple_at_tail, get_head_tuple, get_tail_tuple, pop_tuple_from_head and pop_tuple_from_tail as its access functions and an iterator from head to tail or the other way around. it will be a doubly linkedlist of tuples
 * all inserts to linked_page_list have a flag to PRESERVE_ROOT_PAGE_ID
 * hash_table, a linux page table like hashtable where each bucket points a linked_page_list, each working with PRESERVE_ROOT_PAGE_ID
 * sort that can be called on a linked_page_list or a hash_table
 * utility header function that reads page_type from common_page_header and helps get and set the next_page_id and prev_page_id
   * this can be used to build a generic iterator over linked list, bplus_tree leaf pages and interior pages
 * building a b+tree using a sorted linked_page_list, layer by layer
   * we will first ask for the sorted page double linked list, then build the bplus_tree level by level (level 0 being leaf page)
     * for building ith level of interior page, we copy the first tuple's key of all the lower level (i-1 level) pages, and build a singly linkedlist of interior pages composed of each index record pointing to the lower level page, we maintain only the heads of the 2 adjacent levels and a write iterator to the upper level and read iterator of the lower level.
     * since in the initial phase we are not storing the least_keys_page_id in the interior pages, we can use this interior page header field to link all pages in the same level as a singly linkedlist
     * for this we need to define an union {all_least_keys_page_id next_page_id}, to use the utility iterator to work.
 * allow key common suffix truncation for the keys in the interior pages
   * i.e. if 2 adjacent leaf page record entries are 1,"RohanAEBDV", some_page_id1 and 1,"RohanABC", some_page_id2 then they can be sored as 1, "RohanAE", some_page_id1 and 1, "RohanAB", some_page_id2. OR for index entries 1,"RohanAEBDV", some_page_id1 and 2,"RohanABC", some_page_id2 -> we can truncate it to 1, "", some_page_id1 and 2, "", some_page_id2.
   * this can be done by trncating the index entry generated during a laf page split, if a leaf page ppage1 is split, with the new last record being "RohAN", "33" and the first record of the new page being, "RohDvi", "25", then the index entry (parent_insert in leaf page split) pointing to the new page has to be "RohB", "", ppage2.page_id. As this eaffectively is enough key content to separate ppage1 from ppage2
   * i.e. we only need a part of key in the index entry in the interior pages, the perfic part which sets it apart form the adjacent entries it is being inserted between
 * prefix key compression -> if the index entry (record on interior page) we are looking at is NULL, then copy its contents from the first index entry, while comparing the index entry
