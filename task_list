
** UTILITY AND REFACTORING
 * segregate insert and delete into 2 functions, to reuse code, provide implementations to split_insert function call and merge_if_possible
 * locked_page_info may have READ_LOCKED/WRITE_LOCKED and MODIFIED/UN_MODIFIED bit fields to support the above task of segregation
 * add a flag as a parameter "fail_on_duplicate_key", that decides to fail an insert if a record being inserted has a duplicate key, else allow duplicates
 * build stacked iterator using locked_pages_stack, this can be used to iterate over all the tuples in the b+tree including the interior page - index tuples
 * utility function to delete an index tuple from an index page

** UPDATE FUNCTIONALITY
 * implement update which split or merges depending on the size of the record being updated, (and does neither for fixed length records or if new record and old record are of same size)
 * update by key (updates the last 1) or update by record (updates an exact match record -> here we will already know if it will be a merge or a split)

** ADDITIONAL DELETE FUNCTIONALITY
 * implement delete range, deleting an entire sub tree if it falls into the range (parameter key1 and key2, (key1 <= key2) and flags that suggest whether key1 and key2 are inclusive or not)
 * implement delete record, to delete a specific record from b+tree

* OPTIMIZATION
 * implement redistribute keys functions for fixed length index_def, this will reduce propogation of merges, this task can be delayed to be done at the end
 * see how this can be accomodated in the delete and update functions available at that point in future

** NECESSARY BUT DELAYED UNTIL ACTUAL REQUIREMENTS ARE FULFILLED
 * implement an error handling strategy to check the was_modified parameter, in in-memory-data-store, and exit with error, if the page was modified and was_modified was not set OR if page was not modified and was_modified was set
 * go through the project and implemnt better error handling for failures of malloc and data_access_methods
 * implement throwing errors appropriately, upon failures from dam_p
 * write multi threaded test cases to insert a large csv in to b+tree, measure performance difference
